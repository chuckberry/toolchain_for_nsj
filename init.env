###########################  Configuration file  ################################
# Section are marked to facilitate search
# 
# <SYS_SETUP> general setup
# <TOL_SETUP> toolchain setup
# <BEN_ENV_SETUP> benchmark environment setup
# <KERN_BOOT_SETUP> kernel boot setup
# <BEN_EXE_SETUP> benchmark execution parameters setup
# <BEN_PAR_SETUP> benchmark general parameters setup
# <FUNC_TEST_SETUP> function call test setup
# <STAT_PAR_SETUP> statistics setup
# <GRAPH_PAR_SETUP> graphics parameters                   
# <FAST_TEST_SETUP> fast run setup
# <CPUAFFINITY_TEST_SETUP> cpuaffinity test setup
# 
# Variables in this files have one or more of following 
# characteristics:
# -> describe structure of toolchain
# -> are used in more than on file
# -> a modify can involves all tool not only scripts
# -> their value change frequently, therefore only this file
#    is changed and not file where they are used 
#    (for example: variables for fast run match this case)
#
# Variables with empty value "" are configured by init_env.sh
# please don'touch them!!

# .:: home folder of toolchain
export TA_BASE="/home/users/matteom/jobs/toolchain_for_nsj"

# .:: configuration variables
export INIT_SOURCE="$TA_BASE/test_init.env"

# .:: utility functions
export FUNC_SOURCE="$TA_BASE/functions"

TA_CONFIGURED=""

################################################################################
# <SYS_SETUP>           Configuration of system parameters	       	       #
# -> desc.: parameters that depends on user credentials and processor 	       #	
################################################################################

# .:: number of cpu in the system
# -> used in: functions 
NUM_CPUS=4

# .:: debugfs path
# -> used in: functions
DEBUGFS_PATH="/sys/kernel/debug"

# .:: debugfs files
# -> used in: functions, stat_func.sh
TRACE_PATH="$DEBUGFS_PATH/tracing"

# .:: name and group of owner of test
# -> used in: functions
USER="matteom"
GROUP="stage"

# .:: status of test
# -> used in: run.sh, test_benchd.conf 
STATUS_BENCH=".status_bench"

# .:: running test
# -> used in: run.sh, test_benchd.conf
RUNNING_BENCH=".running_bench"

# .:: flag used to start test
# -> used in: run.sh, check_toolchain.sh 
START_BENCH=".start_bench"

# .:: status of results folder
# -> used in: run.sh, check_toolchain.sh
CLEAN_RESULTS=".clean_dir"

# .:: label of kernel used to test all interested kernel
# -> used in: run.sh
TEST_KERNEL="2.6.34_test_kernel"

################################################################################
# <TOL_SETUP>           Configuration toolchain tree		               #
# -> desc.: parameters that describe structure of toolchain tree	       #
################################################################################

# .:: Kernel images location
# -> used in: run.sh 							       
TA_IMAGES_PATH="$TA_BASE/images"

# .:: Benchmark binary locations
# -> used in: run.sh 							       
TA_BMARKS_PATH="$TA_BASE/bmarks"

# .:: Test scripts location
# -> used in: run.sh 							       
TA_SCRIPTS_PATH="$TA_BASE/scripts"

# .:: Result output folder
# -> used in: run.sh 							       
TA_RESULTS_PATH="$TA_BASE/results"

# .:: Log files location
# -> used in: run.sh 							       
TA_LOG_PATH="$TA_BASE/log"

# .:: Fast test data location
# -> used in: fast_run.sh 							       
TA_FAST_TEST_PATH="$TA_BASE/fast_test"

###################### export environment variables ############################

# theese variables are exported to simplify scripts
[[ ! "$PATH" =~ "$TA_BMARKS_PATH" ]] && export PATH="$TA_BMARKS_PATH:$PATH"
[[ ! "$PATH" =~ "$TA_SCRIPTS_PATH" ]] && export PATH="$TA_SCRIPTS_PATH:$PATH"
[[ ! "$PATH_SCRIPT" =~ "$TA_SCRIPTS_PATH" ]] && export PATH_SCRIPT="$TA_SCRIPTS_PATH"



################################################################################
# <BEN_ENV_SETUP>  	Configuration benchmarks environment                   #
# -> desc.: paramenters that describe structure of folder that contain 	       #
#	    data							       #
################################################################################

# .:: Graphics file folder
# -> used in: run.sh, fast_run.sh, *_bench.sh, *_graphics.sh, stat_func.sh 
GRAPH_FOLDER="graphics"

# .:: Data file folder
# -> used in: run.sh, fast_run.sh, *_bench.sh, *_graphics.sh, stat_func.sh 
DATA_FOLDER="data"

# .:: eps(png) file folder
# -> used in: run.sh, fast_run.sh, *_bench.sh, *_graphics.sh, stat_func.sh 
PNG_FOLDER="png"

################################################################################
# <KERN_BOOT_SETUP>       Configuration images kernel list	       	       #
# -> desc.: parameters used to perform reboot of kernel images list	       #
# -> used in: run.sh 							       #
################################################################################

# .:: Kernel images list
# -> used in: run.sh, make_list.sh
TA_IMAGES_LIST="images_list.txt"

# .:: Index of column to read next kernel in the images list
# -> used in run.sh and it depends on images_list format 
#    decided in make_list.sh
COL_NEXT_KERNEL="3"

# .:: Link to first kernel image used
# -> created in TA_IMAGES_PATH
TA_START_LINK="start"

################################################################################
# <BEN_EXE_SETUP> 	Configuration benchmarks execution parameters          #
################################################################################

# .:: priority given at benchmark
# -> used in: *_bench.sh, stat_func.sh
PRIO_BENCH=20

# .:: priority given at monitor
# -> used in: *_bench.sh, stat_func.sh
PRIO_MONITOR="25"

# .:: suffix given to file produced by monitor
# -> used in *_bench.sh, it depends on monitor 
NAME_OF_BENCH_TRACED="nwBench"

# .:: name of trace file produced by monitor 
# -> used in *_bench.sh, it depends on monitor 
MONITOR_OUT_TRACE="bench_${NAME_OF_BENCH_TRACED}_trace.txt"

# .:: name of histogram file produced by monitor
# -> used in *_bench.sh, it depends on monitor 
MONITOR_OUT_HIST="bench_${NAME_OF_BENCH_TRACED}_histg.txt"

# .:: prefix for benchmark used in Makefile
# -> used in this file, it depends on monitor 
PREFIX_BENCH="nwBench"

# .:: monitor executable file when trace is disabled
# -> used in time and read/store miss benchmarks, depends on Makefile
MONITOR_NOTRACE="monitor-notrace"

# .:: monitor executable file when sched_switch tracer is enabled
# -> used in trace_bench.sh, depends on Makefile
MONITOR_SCHED="monitor-sched"

# .:: monitor executable file when funcgraph tracer is enabled
# -> used in stat_func.sh, depends on Makefile
MONITOR_FTRACE="monitor-ftrace"


################################################################################
# <BEN_PAR_SETUP>    	Configuration of parameters of each benchmark          #
################################################################################

# .:: list of buffer dimension to use
# -> used in: run.sh, *_bench.sh, *_graphics.sh, stat_func.sh 
DIM_LIST=""

# .::number of times to execute benchmarks
# -> used in: run.sh 
NR_TRY_PERFORMANCE_TEST=""

# .:: enable execution of performance test
# -> used in run.sh
TA_MAKE_PERFORMANCE_TEST=""

# .:: list of task
# -> used in trace_bench.sh *_per_task_graphics
TASK_LIST=""

# .:: priority of benchmark and monitor
# -> used in l1_load_bench.sh, l1_store_bench.sh
PRIO_RUN_BENCH="25"

# .:: perf data file
# -> used in l1_load_bench.sh, l1_store_bench.sh
PERF_FILE="perf.txt"

# .:: number of times to run l1_load_benchmark/l1_store_benchmark
# -> used in l1_load_bench.sh, l1_store_bench.sh
NUM_REPEAT_PERF=""

################################################################################
# <FUNC_TEST_SETUP>      Configuration of fast test parameters                 #
################################################################################

# .:: list of functions to profile
# -> used in: stat_func.sh, generate_global_func_graphics.sh
FUNC_LIST=""

# .:: list of functions to profile
# -> used in: stat_func.sh, generate_global_func_graphics.sh
FUNC_TASK_LIST="wave0 wave1 wave2 wave3 mixer0 mixer1 mixer2 monitor"

# .:: list of task
# -> used in case_stat_func.sh 
CASE_LIST="A B C D E F G H I"

# .:: list of buffer dimension to use
# -> used in: run.sh, *_func.sh,  stat_func.sh 
DIM_FUNC_LIST=""

# .::number of times to execute stat_func.sh
# -> used in: run.sh
NR_TRY_FUNC_TEST=""

# .:: enable execution of function test
# -> used in run.sh
TA_MAKE_FUNC_TEST=""

################################################################################
# <STAT_PAR_SETUP>      Configuration of format of statistics                  #
################################################################################

# --- column added by different benchmark

# .:: column of migration
# -> used in:  trace_bench_graphics.sh, depends on format decided in 
#    get_task_duration_migr.awk
MIG_COL=18

# .:: column of number of funcitons call
# -> used in:  stat_func.sh, depends on format decided in 
#    stat_func.awk
COUNT_COL=18

# .:: column of number of occurrence of each case
# -> used in:  case_stat_func.sh, depends on format decided in 
#    stat_func.awk
OCCURRENCE_COL=9

# .:: column of avg sched latency
# -> used in: trace_bench.sh
AVG_SCHED_COL=21

# .:: column of var sched latency
# -> used in: trace_bench.sh
VAR_SCHED_COL=24

# .:: column of var sched latency
# -> used in: trace_bench.sh
UNC_SCHED_COL=33

# --- columns defined by format defined in calc_stat.awk

# .:: column of average
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
AVG_COL=3

# .:: column of variance
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
VAR_COL=6

# .:: column of max value
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
MAX_COL=9

# .:: column of min value
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
MIN_COL=12	

# .:: column of uncertainty value
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
UNC_COL=15	

# .:: all values
# -> used in:  *_graphics.sh, depends on: calc_stat.awk, 
#    get_task_duration_migr.awk, stat_func.awk
ALL_COL=0

# .:: nr of sample generated by monitor 
# --> used in generate_percentili and depends on const.h
NR_SAMPLE=150000


################################################################################
# <GRAPH_PAR_SETUP>      Configuration of graphics parameters                   #
################################################################################

PER_DIM_TAG="per_dim"

PER_FUNC_TAG="per_func"

PER_TASK_TAG="per_task"

GLOBAL_LIST="graphics_list.txt"

# .:: Average value tag
# -> used in: *_graphics.sh
AVG_TAG="<avg>"

# .:: Variance value tag
# -> used in: *_graphics.sh
VAR_TAG="<var>"

# .::
# -> used in:
TITLE_TAG="<TITLE>"

# .::
# -> used in:
XLAB_TAG="<XLAB>"

# .::
# -> used in:
YLAB_TAG="<YLAB>"

# .::
# -> used in:
PREFIX_PLOT_TAG="<PREFIX_PLOT>"

# .::
# -> used in:
AVG_COL_TAG="<AVG_COL_TAG>"

# .::
# -> used in:
VAR_COL_TAG="<VAR_COL_TAG>"

# .:: List of kernel analyzed
# -> used in: generate_global_graphics.sh, generate_global_func_graphics.sh
SECTION_LIST="vanilla taskaff"

################################################################################
# <FAST_TEST_SETUP>      Configuration of fast test parameters                 #
################################################################################

# .:: perform function call test
# -> used in fast_run.sh
FAST_FUNC_TEST=1

# .:: perform time benchmark
# -> used in fast_run.sh
FAST_TIME_BENCH=0	

# .:: perform trace benchmark
# -> used in fast_run.sh
FAST_TRACE_BENCH=0		

# .:: perform l1_load_benchmark
# -> used in fast_run.sh
FAST_L1_LOAD_BENCH=0		

# .:: perform l1_store_benchmark
# -> used in fast_run.sh
FAST_L1_STORE_BENCH=0		

# .:: buffer dimension used in fast test
# -> used in: fast_run.sh
FAST_DIM="2"

# .::number of times to execute benchmarks in fast_test
# -> used in: fast_run.sh 
FAST_TRY="2"

# .:: benchmark executed with fast_run.sh
# -> used in fast_run.sh
FAST_BENCH="nwBench-vanilla_2KB"


################################################################################
# <CPUAFFINITY_TEST_SETUP>  Configuration of cpu affinity test parameters      #
################################################################################

# .:: enable cpuaffinity test
# value: optim worst
# -> used in run.sh
CPUAFF_TEST=""

